{"version":3,"sources":["component/list.jsx","App.js","serviceWorker.js","index.js"],"names":["List","state","isAddNote","handleAddNote","setState","handleSendNote","data","console","log","duration","easing","this","props","notes","map","note","className","key","id","type","value","onChange","e","updateNote","target","icon","onClick","deleteNote","Component","library","add","faTrash","App","inputNote","error","handleChange","event","name","handleSubmit","preventDefault","newNote","Date","now","handleDelete","filter","x","handleUpdate","onSubmit","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uTAoDeA,E,4MA7CbC,MAAQ,CACNC,WAAW,G,EAGbC,cAAgB,WACd,EAAKC,SAAS,CAAEF,WAAW,K,EAG7BG,eAAiB,SAACC,GAChBC,QAAQC,IAAIF,I,uDAGJ,IAAD,OACP,OACE,6BACE,kBAAC,IAAD,CAAUG,SAAU,IAAKC,OAAO,eAC7BC,KAAKC,MAAMC,MAAMC,KAAI,SAACC,GACrB,OACE,yBAAKC,UAAU,WAAWC,IAAKF,EAAKG,IAClC,2BACE,2BACEC,KAAK,OACLC,MAAOL,EAAKK,MACZF,GAAIH,EAAKG,GACTG,SAAU,SAACC,GACT,EAAKV,MAAMW,WAAWD,EAAEE,OAAOJ,MAAOL,EAAKG,OAG/C,8BACE,kBAAC,IAAD,CACEF,UAAU,UACVS,KAAK,QACLC,QAAS,kBAAM,EAAKd,MAAMe,WAAWZ,EAAKG,mB,GAjC7CU,a,qBCAnBC,IAAQC,IAAIC,K,IAsEGC,E,4MAnEb/B,MAAQ,CACNgC,UAAW,GACXpB,MAAO,GACPqB,MAAO,I,EAGTC,aAAe,SAACC,GAAU,MAEAA,EAAMZ,OAAtBa,EAFgB,EAEhBA,KAAMjB,EAFU,EAEVA,MACd,EAAKhB,SAAL,eAAiBiC,EAAOjB,K,EAG1BkB,aAAe,SAAChB,GAEd,GADAA,EAAEiB,iBAC2B,KAAzB,EAAKtC,MAAMgC,UAAkB,CAG/B,IAAMO,EAAU,CAAEtB,GAAIuB,KAAKC,MAAOtB,MAAO,EAAKnB,MAAMgC,WAC9CpB,EAAK,sBAAO,EAAKZ,MAAMY,OAAlB,CAAyB2B,IACpC,EAAKpC,SAAS,CAAES,QAAOoB,UAAW,O,EAOtCU,aAAe,SAACzB,GACd,IAAML,EAAQ,EAAKZ,MAAMY,MAAM+B,QAAO,SAACC,GAAD,OAAOA,EAAE3B,KAAOA,KACtD,EAAKd,SAAS,CAAES,W,EAGlBiC,aAAe,SAAC1B,EAAOF,GACrB,IAAML,EAAQ,EAAKZ,MAAMY,MACzBA,EAAMC,KAAI,SAACC,GACLA,EAAKG,KAAOA,IACdH,EAAKK,MAAQA,MAGjB,EAAKhB,SAAS,CAAES,W,uDAIhB,OACE,yBAAKG,UAAU,gBACb,yBAAKA,UAAU,YACb,0BAAM+B,SAAUpC,KAAK2B,aAActB,UAAU,aAC3C,2BACEK,SAAUV,KAAKwB,aACfhB,KAAK,OACLkB,KAAK,YACLW,YAAY,kBACZ5B,MAAOT,KAAKV,MAAMgC,YAEpB,4BAAQd,KAAK,UAAb,SAGF,kBAAC,EAAD,CACEN,MAAOF,KAAKV,MAAMY,MAClBc,WAAYhB,KAAKgC,aACjBpB,WAAYZ,KAAKmC,qB,GA5DXlB,aCIEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACL3B,QAAQ2B,MAAMA,EAAMgC,c","file":"static/js/main.9bbab1f6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n//import Note from \"./note\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./style.css\";\nimport FilpMove from \"react-flip-move\";\n\nclass List extends Component {\n  state = {\n    isAddNote: false,\n  };\n\n  handleAddNote = () => {\n    this.setState({ isAddNote: true });\n  };\n\n  handleSendNote = (data) => {\n    console.log(data);\n  };\n\n  render() {\n    return (\n      <div>\n        <FilpMove duration={300} easing=\"ease-in-out\">\n          {this.props.notes.map((note) => {\n            return (\n              <div className=\"div-note\" key={note.id}>\n                <p>\n                  <input\n                    type=\"text\"\n                    value={note.value}\n                    id={note.id}\n                    onChange={(e) => {\n                      this.props.updateNote(e.target.value, note.id);\n                    }}\n                  />\n                  <span>\n                    <FontAwesomeIcon\n                      className=\"faicons\"\n                      icon=\"trash\"\n                      onClick={() => this.props.deleteNote(note.id)}\n                    />\n                  </span>\n                </p>\n              </div>\n            );\n          })}\n        </FilpMove>\n      </div>\n    );\n  }\n}\n\nexport default List;\n","import React, { Component } from \"react\";\nimport List from \"./component/list\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./App.css\";\n\nlibrary.add(faTrash);\n\nclass App extends Component {\n  state = {\n    inputNote: \"\",\n    notes: [],\n    error: \"\",\n  };\n\n  handleChange = (event) => {\n    //event.preventDefault();\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (this.state.inputNote !== \"\") {\n      //this.setState({error: ''})\n\n      const newNote = { id: Date.now(), value: this.state.inputNote };\n      const notes = [...this.state.notes, newNote];\n      this.setState({ notes, inputNote: \"\" });\n    }\n    // else {\n    //   this.setState({error: 'Required'})\n    // }\n  };\n\n  handleDelete = (id) => {\n    const notes = this.state.notes.filter((x) => x.id !== id);\n    this.setState({ notes });\n  };\n\n  handleUpdate = (value, id) => {\n    const notes = this.state.notes;\n    notes.map((note) => {\n      if (note.id === id) {\n        note.value = value;\n      }\n    });\n    this.setState({ notes });\n  };\n\n  render() {\n    return (\n      <div className=\"container p4\">\n        <div className=\"div-main\">\n          <form onSubmit={this.handleSubmit} className=\"form-note\">\n            <input\n              onChange={this.handleChange}\n              type=\"text\"\n              name=\"inputNote\"\n              placeholder=\"Enter your note\"\n              value={this.state.inputNote}\n            />\n            <button type=\"submit\">Send</button>\n          </form>\n\n          <List\n            notes={this.state.notes}\n            deleteNote={this.handleDelete}\n            updateNote={this.handleUpdate}\n          ></List>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}